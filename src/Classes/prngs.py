# Author : Florian Picca <florian.picca@oppida.fr>
# Date : February 2020
from time import time
from random import getrandbits
from os import urandom
from binascii import hexlify
from ..utils import *


class External:
    """
    Read random bytes generated by an external PRNG from a file.
    """

    def __init__(self, path, parser):
        self.parser = parser
        self.path = path

        p = parser(path)
        # if there is an error during parsing, self.poll will be None
        self.pool = p.convert()


class RANDU:
    """
    Famously broken PRNG.
    https://en.wikipedia.org/wiki/RANDU
    """

    def __init__(self):
        self.seed = int(time())

    def get_next(self):
        self.seed = (65539 * self.seed) % 2 ** 31
        return self.seed

    def getBits(self, n):
        bits = ""
        for _ in range(0, n, 31):
            bits += bin(self.get_next())[2:].zfill(31)
        return bits[:n]


class PyRand:
    """
    Python's random module. Based on the Mersenne twister
    """

    def getBits(self, n):
        return bin(getrandbits(n))[2:].zfill(n)


class DevURandom:
    """
    Linux's /dev/urandom output.
    """

    def getBits(self, n):
        N = n // 8 + 1
        b = hexlify(urandom(N))
        bits = bin(int(b, 16))[2:].zfill(N)
        return bits[:n]


# -------------
# Mappings
# -------------

PRNG_CLASS = {
    PRNGS.External: External,
    PRNGS.RANDU: RANDU,
    PRNGS.PyRandom: PyRand,
    PRNGS.DevURandom: DevURandom
}

PRNG_DISPLAY_NAME = {
    PRNGS.External: "External",
    PRNGS.RANDU: "RANDU",
    PRNGS.PyRandom: "Python random",
    PRNGS.DevURandom: "/dev/urandom"
}

# Invert PRNG_DISPLAY_NAME to be faster when looking for a class from the display name
PRNG_NAME_TO_ENUM = {
    "External": PRNGS.External,
    "RANDU": PRNGS.RANDU,
    "Python random": PRNGS.PyRandom,
    "/dev/urandom": PRNGS.DevURandom
}
